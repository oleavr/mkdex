'use strict';

const mkdex = require('..');
const should = require('should');

describe('Simple', function () {
  it('should generate dex for minimal class', function () {
    const actual = mkdex({
      name: 'Lre/frida/CustomBadger;',
      sourceFileName: 'CustomBadger.java',
      superClass: 'Ljava/lang/Object;',
      interfaces: [],
      methods: [
        ['getName', 'Ljava/lang/String;', []],
      ],
    });

    const expected = Buffer.from([
      //
      // Offset 0: Header
      //

      // magic: <8 bytes>
      0x64, 0x65, 0x78, 0x0a, 0x30, 0x33, 0x35, 0x00,
      // checksum: 2862170462
      0x5e, 0x41, 0x99, 0xaa,

      // signature: <20 bytes>
      0xaa, 0xed, 0x38, 0x82, 0x79, 0xdf, 0x69, 0x7f, 0xeb, 0x06, 0x3d, 0x05, 0x69, 0x68, 0x4e, 0x35, 0xbc, 0xe1, 0x86, 0x5e,

      // fileSize: 536
      0x18, 0x02, 0x00, 0x00,

      // headerSize: 112
      0x70, 0x00, 0x00, 0x00,

      // endianTag: 305419896
      0x78, 0x56, 0x34, 0x12,

      // linkSize: 0
      0x00, 0x00, 0x00, 0x00,

      // linkOffset: 0
      0x00, 0x00, 0x00, 0x00,
      // mapOffset: 0x190
      0x90, 0x01, 0x00, 0x00,

      // stringIdsSize: 9
      0x09, 0x00, 0x00, 0x00,

      // stringIdsOffset: 0x70
      0x70, 0x00, 0x00, 0x00,
      // typeIdsSize: 4
      0x04, 0x00, 0x00, 0x00,

      // typeIdsOffset: 0x94
      0x94, 0x00, 0x00, 0x00,
      // protoIdsSize: 2
      0x02, 0x00, 0x00, 0x00,

      // protoIdsOffset: 0xa4
      0xa4, 0x00, 0x00, 0x00,
      // fieldIdsSize: 0
      0x00, 0x00, 0x00, 0x00,

      // fieldIdsOffset: 0
      0x00, 0x00, 0x00, 0x00,
      // methodIdsSize: 3
      0x03, 0x00, 0x00, 0x00,

      // methodIdsOffset: 0xbc
      0xbc, 0x00, 0x00, 0x00,
      // classDefsSize: 1
      0x01, 0x00, 0x00, 0x00,

      // classDefsOffset: 0xd4
      0xd4, 0x00, 0x00, 0x00,
      // dataSize: 292
      0x24, 0x01, 0x00, 0x00,

      // dataOffset: 0xf4
      0xf4, 0x00, 0x00, 0x00,

      //
      // Offset 0x70: String IDs
      //

        // stringIds[0]
        0x0c, 0x01, 0x00, 0x00, // offset = '<init>'
        // stringIds[1]
        0x14, 0x01, 0x00, 0x00, // offset = 'CustomBadger.java'
        // stringIds[2]
        0x27, 0x01, 0x00, 0x00, // offset = 'L'
        // stringIds[3]
        0x2a, 0x01, 0x00, 0x00, // offset = 'Ljava/lang/Object;'
        // stringIds[4]
        0x3e, 0x01, 0x00, 0x00, // offset = 'Ljava/lang/String;'
        // stringIds[5]
        0x52, 0x01, 0x00, 0x00, // offset = 'Lre/frida/CustomBadger;'
        // stringIds[6]
        0x6b, 0x01, 0x00, 0x00, // offset = 'V'
        // stringIds[7]
        0x6e, 0x01, 0x00, 0x00, // offset = 'getName'
        // stringIds[8]
        0x77, 0x01, 0x00, 0x00, // offset = 'this'

      //
      // Offset 0x94: Type IDs
      //

        // typeIds[0]
        0x03, 0x00, 0x00, 0x00, // index = 'Ljava/lang/Object;'
        // typeIds[1]
        0x04, 0x00, 0x00, 0x00, // index = 'Ljava/lang/String;'
        // typeIds[2]
        0x05, 0x00, 0x00, 0x00, // index = 'Lre/frida/CustomBadger;'
        // typeIds[3]
        0x06, 0x00, 0x00, 0x00, // index = 'V'

      //
      // Offset 0xa4: Proto IDs
      //

        // protoIds[0]
        0x02, 0x00, 0x00, 0x00, // shortyIndex: 2
        0x01, 0x00, 0x00, 0x00, // returnTypeIndex: 1
        0x00, 0x00, 0x00, 0x00, // parametersOffset: 0
        // protoIds[1]
        0x06, 0x00, 0x00, 0x00, // shortyIndex: 6
        0x03, 0x00, 0x00, 0x00, // returnTypeIndex: 3
        0x00, 0x00, 0x00, 0x00, // parametersOffset: 0

      //
      // Offset 0xbc: Method IDs
      //

        // methodIds[0]
        0x00, 0x00, // classIndex: 0
        0x01, 0x00, // protoIndex: 1
        0x00, 0x00, 0x00, 0x00, // nameIndex: 0
        // methodIds[1]
        0x02, 0x00, // classIndex: 2
        0x01, 0x00, // protoIndex: 1
        0x00, 0x00, 0x00, 0x00, // nameIndex: 0
        // methodIds[2]
        0x02, 0x00, // classIndex: 2
        0x00, 0x00, // protoIndex: 0
        0x07, 0x00, 0x00, 0x00, // nameIndex: 7

      //
      // Offset 0xd4: Class defs
      //

        // classDefs[0]
        0x02, 0x00, 0x00, 0x00, // classIndex: 2
        0x01, 0x00, 0x00, 0x00, // accessFlags: 1
        0x00, 0x00, 0x00, 0x00, // superClassIndex: 0
        0x00, 0x00, 0x00, 0x00, // interfacesOffset: 0
        0x01, 0x00, 0x00, 0x00, // sourceFileIndex: 1
        0x00, 0x00, 0x00, 0x00, // annotationsOffset: 0
        0x82, 0x01, 0x00, 0x00, // classDataOffset: 0x182
        0x00, 0x00, 0x00, 0x00, // staticValuesOffset: 0

      //
      // Offset 0xf4: Code item 0
      //

      // registersSize: 1
      0x01, 0x00,
      // insSize: 1
      0x01, 0x00,
      // outsSize: 1
      0x01, 0x00,
      // triesSize: 0
      0x00, 0x00,
      // debugInfoOffset: 0x17d
      0x7d, 0x01, 0x00, 0x00,
      // insnsSize: 4
      0x04, 0x00, 0x00, 0x00,
        // insns[0]
        0x70, 0x10, // insn: 4208
        // insns[1]
        0x00, 0x00, // insn: 0
        // insns[2]
        0x00, 0x00, // insn: 0
        // insns[3]
        0x0e, 0x00, // insn: 14

      //
      // Offset 0x10c: Strings
      //

        // strings[0]
        0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x00, // string: <init>
        // strings[1]
        0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x61, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x00, // string: CustomBadger.java
        // strings[2]
        0x01, 0x4c, 0x00, // string: L
        // strings[3]
        0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x00, // string: Ljava/lang/Object;
        // strings[4]
        0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x00, // string: Ljava/lang/String;
        // strings[5]
        0x17, 0x4c, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x69, 0x64, 0x61, 0x2f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x61, 0x64, 0x67, 0x65, 0x72, 0x3b, 0x00, // string: Lre/frida/CustomBadger;
        // strings[6]
        0x01, 0x56, 0x00, // string: V
        // strings[7]
        0x07, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x00, // string: getName
        // strings[8]
        0x04, 0x74, 0x68, 0x69, 0x73, 0x00, // string: this

      //
      // Offset 0x17d: Debug info item 0
      //

      // lineStart: 3
      0x03,
      // parametersSize: 0
      0x00,
      // opcodes
      0x07, 0x0e, 0x00,

      //
      // Offset 0x182: Class data for class 0
      //

      // staticFieldsSize: 0
      0x00,
      // instanceFieldsSize: 0
      0x00,
      // directMethodsSize: 1
      0x01,
      // virtualMethodsSize: 1
      0x01,
        // directMethods[0]
        0x01, // methodIndexDiff: 1
        0x81, 0x80, 0x04, // accessFlags: 65537
        0xf4, 0x01, // codeOffset: 0xf4
        // virtualMethods[0]
        0x02, // methodIndexDiff: 2
        0x81, 0x02, // accessFlags: 257
        0x00, // codeOffset: 0

      //
      // Offset 0x190: Map
      //

      // size: 11
      0x0b, 0x00, 0x00, 0x00,
        // items[0]
        0x00, 0x00, // type: TYPE_HEADER_ITEM
        0x00, 0x00, // unused: 0
        0x01, 0x00, 0x00, 0x00, // size: 1
        0x00, 0x00, 0x00, 0x00, // offset: 0
        // items[1]
        0x01, 0x00, // type: TYPE_STRING_ID_ITEM
        0x00, 0x00, // unused: 0
        0x09, 0x00, 0x00, 0x00, // size: 9
        0x70, 0x00, 0x00, 0x00, // offset: 0x70
        // items[2]
        0x02, 0x00, // type: TYPE_TYPE_ID_ITEM
        0x00, 0x00, // unused: 0
        0x04, 0x00, 0x00, 0x00, // size: 4
        0x94, 0x00, 0x00, 0x00, // offset: 0x94
        // items[3]
        0x03, 0x00, // type: TYPE_PROTO_ID_ITEM
        0x00, 0x00, // unused: 0
        0x02, 0x00, 0x00, 0x00, // size: 2
        0xa4, 0x00, 0x00, 0x00, // offset: 0xa4
        // items[4]
        0x05, 0x00, // type: TYPE_METHOD_ID_ITEM
        0x00, 0x00, // unused: 0
        0x03, 0x00, 0x00, 0x00, // size: 3
        0xbc, 0x00, 0x00, 0x00, // offset: 0xbc
        // items[5]
        0x06, 0x00, // type: TYPE_CLASS_DEF_ITEM
        0x00, 0x00, // unused: 0
        0x01, 0x00, 0x00, 0x00, // size: 1
        0xd4, 0x00, 0x00, 0x00, // offset: 0xd4
        // items[6]
        0x01, 0x20, // type: TYPE_CODE_ITEM
        0x00, 0x00, // unused: 0
        0x01, 0x00, 0x00, 0x00, // size: 1
        0xf4, 0x00, 0x00, 0x00, // offset: 0xf4
        // items[7]
        0x02, 0x20, // type: TYPE_STRING_DATA_ITEM
        0x00, 0x00, // unused: 0
        0x09, 0x00, 0x00, 0x00, // size: 9
        0x0c, 0x01, 0x00, 0x00, // offset: 0x10c
        // items[8]
        0x03, 0x20, // type: TYPE_DEBUG_INFO_ITEM
        0x00, 0x00, // unused: 0
        0x01, 0x00, 0x00, 0x00, // size: 1
        0x7d, 0x01, 0x00, 0x00, // offset: 0x17d
        // items[9]
        0x00, 0x20, // type: TYPE_CLASS_DATA_ITEM
        0x00, 0x00, // unused: 0
        0x01, 0x00, 0x00, 0x00, // size: 1
        0x82, 0x01, 0x00, 0x00, // offset: 0x182
        // items[10]
        0x00, 0x10, // type: TYPE_MAP_LIST
        0x00, 0x00, // unused: 0
        0x01, 0x00, 0x00, 0x00, // size: 1
        0x90, 0x01, 0x00, 0x00, // offset: 0x190
    ]);

    const actualHex = hexdump(actual, { ansi: true });
    const expectedHex = hexdump(expected, { ansi: true });
    actualHex.should.be.equal(expectedHex);
  });

  it('should generate dex with one interface', function () {
    const actual = mkdex({
      name: 'Lre/frida/Banana;',
      sourceFileName: 'Banana.java',
      superClass: 'Ljava/lang/Object;',
      interfaces: ['Lre/frida/Eatable;'],
      methods: [
        ['getCalories', 'I', ['I']],
        ['getName', 'Ljava/lang/String;', []],
      ],
    });

    const expected = Buffer.from([
      // Magic
      0x64, 0x65, 0x78, 0x0a, 0x30, 0x33, 0x35, 0x00,

      // Checksum (adler32)
      0x55, 0x4c, 0xdb, 0xca,

      // Signature (SHA-1)
      0xcc, 0x58, 0x0c, 0x97, 0xd1, 0x54, 0x72, 0xfe, 0x57, 0x20, 0x2a, 0x7e,
      0x75, 0x55, 0x1e, 0x93, 0x6f, 0x81, 0xf0, 0x49,

      // File size
      0x74, 0x02, 0x00, 0x00,

      // Header size
      0x70, 0x00, 0x00, 0x00,

      // Endian tag
      0x78, 0x56, 0x34, 0x12,

      // Link size
      0x00, 0x00, 0x00, 0x00,
      // Link offset
      0x00, 0x00, 0x00, 0x00,

      // Map offset
      0xe0, 0x01, 0x00, 0x00,

      // String IDs size
      0x0c, 0x00, 0x00, 0x00,
      // String IDs offset
      0x70, 0x00, 0x00, 0x00,

      // Type IDs size
      0x06, 0x00, 0x00, 0x00,
      // Type IDs offset
      0xa0, 0x00, 0x00, 0x00,

      // Proto IDs size
      0x03, 0x00, 0x00, 0x00,
      // Proto IDs offset
      0xb8, 0x00, 0x00, 0x00,

      // Field IDs size
      0x00, 0x00, 0x00, 0x00,
      // Field IDs offset
      0x00, 0x00, 0x00, 0x00,

      // Method IDs size
      0x04, 0x00, 0x00, 0x00,
      // Method IDs offset
      0xdc, 0x00, 0x00, 0x00,

      // Class defs size
      0x01, 0x00, 0x00, 0x00,
      // Class defs offset
      0xfc, 0x00, 0x00, 0x00,

      // Data size
      0x58, 0x01, 0x00, 0x00,
      // Data offset
      0x1c, 0x01, 0x00, 0x00,

      // Offset 0x70: string_ids[12]
      0x42, 0x01, 0x00, 0x00, // string_ids[0x00] = '<init>'
      0x4a, 0x01, 0x00, 0x00, // string_ids[0x01] = 'Banana.java'
      0x57, 0x01, 0x00, 0x00, // string_ids[0x02] = 'I'
      0x5a, 0x01, 0x00, 0x00, // string_ids[0x03] = 'II'
      0x5e, 0x01, 0x00, 0x00, // string_ids[0x04] = 'L'
      0x61, 0x01, 0x00, 0x00, // string_ids[0x05] = 'Ljava/lang/Object;'
      0x75, 0x01, 0x00, 0x00, // string_ids[0x06] = 'Ljava/lang/String;'
      0x89, 0x01, 0x00, 0x00, // string_ids[0x07] = 'Lre/frida/Banana;'
      0x9c, 0x01, 0x00, 0x00, // string_ids[0x08] = 'Lre/frida/Eatable;'
      0xb0, 0x01, 0x00, 0x00, // string_ids[0x09] = 'V'
      0xb3, 0x01, 0x00, 0x00, // string_ids[0x0a] = 'getCalories'
      0xc0, 0x01, 0x00, 0x00, // string_ids[0x0b] = 'getName'

      // Offset 0xa0: type_ids[6]
      0x02, 0x00, 0x00, 0x00, // type_ids[0x00] = 'I'
      0x05, 0x00, 0x00, 0x00, // type_ids[0x01] = 'Ljava/lang/Object;'
      0x06, 0x00, 0x00, 0x00, // type_ids[0x02] = 'Ljava/lang/String;'
      0x07, 0x00, 0x00, 0x00, // type_ids[0x03] = 'Lre/frida/Banana;'
      0x08, 0x00, 0x00, 0x00, // type_ids[0x04] = 'Lre/frida/Eatable;'
      0x09, 0x00, 0x00, 0x00, // type_ids[0x05] = 'V'

      // Offset 0xb8: proto_ids[3]
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x01, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x09, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

      // Offset 0xdc: methods[4]
      0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
      0x03, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00,

      // Offset 0xfc: classes[1]
        /*         class_idx */ 0x03, 0x00, 0x00, 0x00,
        /*      access_flags */ 0x01, 0x00, 0x00, 0x00,
        /*    superclass_idx */ 0x01, 0x00, 0x00, 0x00,
        /*    interfaces_off */ 0x34, 0x01, 0x00, 0x00,
        /*   source_file_idx */ 0x01, 0x00, 0x00, 0x00,
        /*   annotations_off */ 0x00, 0x00, 0x00, 0x00,
        /*    class_data_off */ 0xce, 0x01, 0x00, 0x00,
        /* static_values_off */ 0x00, 0x00, 0x00, 0x00,

      // Offset 0x11c: code_item for classes[0].direct_methods[0]
        /* registers_size */ 0x01, 0x00,
        /*       ins_size */ 0x01, 0x00,
        /*      outs_size */ 0x01, 0x00,
        /*     tries_size */ 0x00, 0x00,
        /* debug_info_off */ 0xc9, 0x01, 0x00, 0x00,
        /*     insns_size */ 0x04, 0x00, 0x00, 0x00,
        /*       insns[0] */ 0x70, 0x10,
        /*       insns[1] */ 0x00, 0x00,
        /*       insns[2] */ 0x00, 0x00,
        /*       insns[3] */ 0x0e, 0x00,

      // Offset 0x134: interfaces for classes[0]
        /*     size */ 0x01, 0x00, 0x00, 0x00,
        /* type_idx */ 0x04, 0x00,

      // Padding
      0x00, 0x00,

      // Offset 0x13c: parameters for proto_ids[0]
        /*     size */ 0x01, 0x00, 0x00, 0x00,
        /* type_idx */ 0x00, 0x00,

      //
      // STRINGS
      //

      // Offset 0x142: strings[0] = '<init>'
      0x06,
      0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x00,

      // Offset 0x14a: strings[1] = 'Banana.java'
      0x0b,
      0x42, 0x61, 0x6e, 0x61, 0x6e, 0x61, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x00,

      // Offset 0x157: strings[2] = 'I'
      0x01,
      0x49, 0x00,

      // Offset 0x15a: strings[3] = 'II'
      0x02,
      0x49, 0x49, 0x00,

      // Offset 0x15e: strings[4] = 'L'
      0x01,
      0x4c, 0x00,

      // Offset 0x161: strings[5] = 'Ljava/lang/Object;'
      0x12,
      0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
      0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x00,

      // Offset 0x175: strings[6] = 'Ljava/lang/String;'
      0x12,
      0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53,
      0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x00,

      // Offset 0x189: strings[7] = 'Lre/frida/Banana;'
      0x11,
      0x4c, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x69, 0x64, 0x61, 0x2f, 0x42, 0x61,
      0x6e, 0x61, 0x6e, 0x61, 0x3b, 0x00,

      // Offset 0x19c: strings[8] = 'Lre/frida/Eatable;'
      0x12,
      0x4c, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x69, 0x64, 0x61, 0x2f, 0x45, 0x61,
      0x74, 0x61, 0x62, 0x6c, 0x65, 0x3b, 0x00,

      // Offset 0x1b0: strings[9] = 'V'
      0x01,
      0x56, 0x00,

      // Offset 0x1b3: strings[10] = 'getCalories'
      0x0b,
      0x67, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x00,

      // Offset 0x1c0: strings[11] = 'getName'
      0x07,
      0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x00,

      // Offset 0x1c9: debug info for classes[0].direct_methods[0]
        /*           line_start */ 0x03,
        /*      parameters_size */ 0x00,
        /* DBG_SET_PROLOGUE_END */ 0x07,
        /*     <special opcode> */ 0x0e,
        /*     DBG_END_SEQUENCE */ 0x00,

      // Offset 0x1ce: class data for classes[0]
        /*   static_fields_size */ 0x00,
        /* instance_fields_size */ 0x00,
        /*  direct_methods_size */ 0x01,
        /* virtual_methods_size */ 0x02,

        /* static_fields: none */
        /* instance_fields: none */

        // direct_methods[0]
          /* method_idx_diff */ 0x01,
          /*    access_flags */ 0x81, 0x80, 0x04,
          /*        code_off */ 0x9c, 0x02, /* 0x11c */

        // virtual_methods[0]
          /* method_idx_diff */ 0x02,
          /*    access_flags */ 0x81, 0x02,
          /*        code_off */ 0x00,
        // virtual_methods[1]
          /* method_idx_diff */ 0x01,
          /*    access_flags */ 0x81, 0x02,
          /*        code_off */ 0x00,

      // Offset 0x1e0: map
        /* size */ 0x0c, 0x00, 0x00, 0x00,
        // list[0]
          /*      TYPE_HEADER_ITEM */ 0x00, 0x00,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x01, 0x00, 0x00, 0x00,
          /*                offset */ 0x00, 0x00, 0x00, 0x00,
        // list[1]
          /*   TYPE_STRING_ID_ITEM */ 0x01, 0x00,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x0c, 0x00, 0x00, 0x00,
          /*                offset */ 0x70, 0x00, 0x00, 0x00,
        // list[2]
          /*     TYPE_TYPE_ID_ITEM */ 0x02, 0x00,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x06, 0x00, 0x00, 0x00,
          /*                offset */ 0xa0, 0x00, 0x00, 0x00,
        // list[3]
          /*    TYPE_PROTO_ID_ITEM */ 0x03, 0x00,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x03, 0x00, 0x00, 0x00,
          /*                offset */ 0xb8, 0x00, 0x00, 0x00,
        // list[4]
          /*   TYPE_METHOD_ID_ITEM */ 0x05, 0x00,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x04, 0x00, 0x00, 0x00,
          /*                offset */ 0xdc, 0x00, 0x00, 0x00,
        // list[5]
          /*   TYPE_CLASS_DEF_ITEM */ 0x06, 0x00,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x01, 0x00, 0x00, 0x00,
          /*                offset */ 0xfc, 0x00, 0x00, 0x00,
        // list[6]
          /*        TYPE_CODE_ITEM */ 0x01, 0x20,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x01, 0x00, 0x00, 0x00,
          /*                offset */ 0x1c, 0x01, 0x00, 0x00,
        // list[7]
          /*        TYPE_TYPE_LIST */ 0x01, 0x10,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x02, 0x00, 0x00, 0x00,
          /*                offset */ 0x34, 0x01, 0x00, 0x00,
        // list[8]
          /* TYPE_STRING_DATA_ITEM */ 0x02, 0x20,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x0c, 0x00, 0x00, 0x00,
          /*                offset */ 0x42, 0x01, 0x00, 0x00,
        // list[9]
          /*  TYPE_DEBUG_INFO_ITEM */ 0x03, 0x20,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x01, 0x00, 0x00, 0x00,
          /*                offset */ 0xc9, 0x01, 0x00, 0x00,
        // list[10]
          /*  TYPE_CLASS_DATA_ITEM */ 0x00, 0x20,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x01, 0x00, 0x00, 0x00,
          /*                offset */ 0xce, 0x01, 0x00, 0x00,
        // list[11]
          /*         TYPE_MAP_LIST */ 0x00, 0x10,
          /*                unused */ 0x00, 0x00,
          /*                  size */ 0x01, 0x00, 0x00, 0x00,
          /*                offset */ 0xe0, 0x01, 0x00, 0x00
    ]);

    const actualHex = hexdump(actual, { ansi: true });
    const expectedHex = hexdump(expected, { ansi: true });
    actualHex.should.be.equal(expectedHex);
  });

  it('should generate dex with exception annotations', function () {
    const actual = mkdex({
      name: 'Lcom/example/MyTrustManager;',
      sourceFileName: 'MyTrustManager.java',
      superClass: 'Ljava/lang/Object;',
      interfaces: ['Ljavax/net/ssl/X509TrustManager;'],
      methods: [
        ['checkClientTrusted', 'V', ['[Ljava/security/cert/X509Certificate;', 'Ljava/lang/String;'], ['Ljava/security/cert/CertificateException;']],
        ['checkServerTrusted', 'V', ['[Ljava/security/cert/X509Certificate;', 'Ljava/lang/String;'], ['Ljava/security/cert/CertificateException;']],
        ['getAcceptedIssuers', '[Ljava/security/cert/X509Certificate;', []],
      ],
    });

    const expected = Buffer.from([
      // Magic
      0x64, 0x65, 0x78, 0x0a, 0x30, 0x33, 0x35, 0x00,

      // Checksum (adler32)
      0x32, 0xa1, 0xdc, 0xe1,

      // Signature (SHA-1)
      0x93, 0xd8, 0x3a, 0x69, 0x3b, 0xb0, 0x8b, 0xf8, 0x53, 0xd7, 0xcf, 0x88,
      0x97, 0x0c, 0xea, 0xd1, 0x51, 0x39, 0xb0, 0x4f,

      // File size
      0xb4, 0x03, 0x00, 0x00,

      // Header size
      0x70, 0x00, 0x00, 0x00,

      // Endian tag
      0x78, 0x56, 0x34, 0x12,

      // Link size
      0x00, 0x00, 0x00, 0x00,
      // Link offset
      0x00, 0x00, 0x00, 0x00,

      // Map offset
      0xfc, 0x02, 0x00, 0x00,

      // String IDs size
      0x11, 0x00, 0x00, 0x00,
      // String IDs offset
      0x70, 0x00, 0x00, 0x00,

      // Type IDs size
      0x08, 0x00, 0x00, 0x00,
      // Type IDs offset
      0xb4, 0x00, 0x00, 0x00,

      // Proto IDs size
      0x03, 0x00, 0x00, 0x00,
      // Proto IDs offset
      0xd4, 0x00, 0x00, 0x00,

      // Field IDs size
      0x00, 0x00, 0x00, 0x00,
      // Field IDs offset
      0x00, 0x00, 0x00, 0x00,

      // Method IDs size
      0x05, 0x00, 0x00, 0x00,
      // Method IDs offset
      0xf8, 0x00, 0x00, 0x00,

      // Class defs size
      0x01, 0x00, 0x00, 0x00,
      // Class defs offset
      0x20, 0x01, 0x00, 0x00,

      // Data size
      0x74, 0x02, 0x00, 0x00,
      // Data offset
      0x40, 0x01, 0x00, 0x00,

      // Offset 0x70: string_ids[17]
      0x90, 0x01, 0x00, 0x00, // string_ids[0x00] = '<init>'
      0x98, 0x01, 0x00, 0x00, // string_ids[0x01] = 'L'
      0x9b, 0x01, 0x00, 0x00, // string_ids[0x02] = 'Lcom/example/MyTrustManager;'
      0xb9, 0x01, 0x00, 0x00, // string_ids[0x03] = 'Ldalvik/annotation/Throws;'
      0xd5, 0x01, 0x00, 0x00, // string_ids[0x04] = 'Ljava/lang/Object;'
      0xe9, 0x01, 0x00, 0x00, // string_ids[0x05] = 'Ljava/lang/String;'
      0xfd, 0x01, 0x00, 0x00, // string_ids[0x06] = 'Ljava/security/cert/CertificateException;'
      0x28, 0x02, 0x00, 0x00, // string_ids[0x07] = 'Ljavax/net/ssl/X509TrustManager;'
      0x4a, 0x02, 0x00, 0x00, // string_ids[0x08] = 'MyTrustManager.java'
      0x5f, 0x02, 0x00, 0x00, // string_ids[0x09] = 'V'
      0x62, 0x02, 0x00, 0x00, // string_ids[0x0a] = 'VLL'
      0x67, 0x02, 0x00, 0x00, // string_ids[0x0b] = '[Ljava/security/cert/X509Certificate;'
      0x8e, 0x02, 0x00, 0x00, // string_ids[0x0c] = 'checkClientTrusted'
      0xa2, 0x02, 0x00, 0x00, // string_ids[0x0d] = 'checkServerTrusted'
      0xb6, 0x02, 0x00, 0x00, // string_ids[0x0e] = 'getAcceptedIssuers'
      0xca, 0x02, 0x00, 0x00, // string_ids[0x0f] = 'this'
      0xd0, 0x02, 0x00, 0x00, // string_ids[0x10] = 'value'

      // Offset 0xb4: type_ids[8]
      0x02, 0x00, 0x00, 0x00, // type_ids[0x00] = 'Lcom/example/MyTrustManager;'
      0x03, 0x00, 0x00, 0x00, // type_ids[0x01] = 'Ldalvik/annotation/Throws;'
      0x04, 0x00, 0x00, 0x00, // type_ids[0x02] = 'Ljava/lang/Object;'
      0x05, 0x00, 0x00, 0x00, // type_ids[0x03] = 'Ljava/lang/String;'
      0x06, 0x00, 0x00, 0x00, // type_ids[0x04] = 'Ljava/security/cert/CertificateException;'
      0x07, 0x00, 0x00, 0x00, // type_ids[0x05] = 'Ljavax/net/ssl/X509TrustManager;'
      0x09, 0x00, 0x00, 0x00, // type_ids[0x06] = 'V'
      0x0b, 0x00, 0x00, 0x00, // type_ids[0x07] = '[Ljava/security/cert/X509Certificate;'

      // Offset 0xd4: proto_ids[3]
      0x09, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

      // Offset 0xf8: methods[5]
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x0c, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

      // Offset 0x120: classes[1]
        /*         class_idx */ 0x00, 0x00, 0x00, 0x00,
        /*      access_flags */ 0x01, 0x00, 0x00, 0x00,
        /*    superclass_idx */ 0x02, 0x00, 0x00, 0x00,
        /*    interfaces_off */ 0x80, 0x01, 0x00, 0x00,
        /*   source_file_idx */ 0x08, 0x00, 0x00, 0x00,
        /*   annotations_off */ 0x60, 0x01, 0x00, 0x00,
        /*    class_data_off */ 0xe4, 0x02, 0x00, 0x00,
        /* static_values_off */ 0x00, 0x00, 0x00, 0x00,

      // Offset 0x140: annotation_set_item
        /*           size */ 0x01, 0x00, 0x00, 0x00,
        /* annotation_off */ 0xdc, 0x02, 0x00, 0x00,

      // Offset 0x148: code_item for classes[0].direct_methods[0]
        /* registers_size */ 0x01, 0x00,
        /*       ins_size */ 0x01, 0x00,
        /*      outs_size */ 0x01, 0x00,
        /*     tries_size */ 0x00, 0x00,
        /* debug_info_off */ 0xd7, 0x02, 0x00, 0x00,
        /*     insns_size */ 0x04, 0x00, 0x00, 0x00,
        /*       insns[0] */ 0x70, 0x10,
        /*       insns[1] */ 0x04, 0x00,
        /*       insns[2] */ 0x00, 0x00,
        /*       insns[3] */ 0x0e, 0x00,

      // Offset 0x160: annotations for classes[0]
        /*     class_annotations_off */ 0x00, 0x00, 0x00, 0x00,
        /*               fields_size */ 0x00, 0x00, 0x00, 0x00,
        /*    annotated_methods_size */ 0x02, 0x00, 0x00, 0x00,
        /* annotated_parameters_size */ 0x00, 0x00, 0x00, 0x00,

        /* method_annotation[2] */
          /*      method_idx */ 0x01, 0x00, 0x00, 0x00,
          /* annotations_off */ 0x40, 0x01, 0x00, 0x00,
          /*      method_idx */ 0x02, 0x00, 0x00, 0x00,
          /* annotations_off */ 0x40, 0x01, 0x00, 0x00,

      // Offset 0x180: interfaces for classes[0]
        /*     size */ 0x01, 0x00, 0x00, 0x00,
        /* type_idx */ 0x05, 0x00,

      // Padding
      0x00, 0x00,

      // Offset 0x188: parameters for proto_ids[1]
        /*     size */ 0x02, 0x00, 0x00, 0x00,
        /* type_idx */ 0x07, 0x00,
        /* type_idx */ 0x03, 0x00,

      //
      // STRINGS
      //

      // Offset 0x190: strings[0] = '<init>'
      0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x00,
      // Offset 0x198: strings[1] = 'L'
      0x01, 0x4c, 0x00,
      // Offset 0x19b: strings[2] = 'Lcom/example/MyTrustManager;'
      0x1c, 0x4c, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x4d, 0x79, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3b, 0x00,
      // Offset 0x1b9: strings[3] = 'Ldalvik/annotation/Throws;'
      0x1a, 0x4c, 0x64, 0x61, 0x6c, 0x76, 0x69, 0x6b, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x3b, 0x00,
      // Offset 0x1d5: strings[4] = 'Ljava/lang/Object;'
      0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x00,
      // Offset 0x1e9: strings[5] = 'Ljava/lang/String;'
      0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x00,
      // Offset 0x1fd: strings[6] = 'Ljava/security/cert/CertificateException;'
      0x29, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x00,
      // Offset 0x228: strings[7] = 'Ljavax/net/ssl/X509TrustManager;'
      0x20, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x78, 0x2f, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x73, 0x6c, 0x2f, 0x58, 0x35, 0x30, 0x39, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3b, 0x00,
      // Offset 0x24a: strings[8] = 'MyTrustManager.java'
      0x13, 0x4d, 0x79, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x00,
      // Offset 0x25f: strings[9] = 'V'
      0x01, 0x56, 0x00,
      // Offset 0x262: strings[10] = 'VLL'
      0x03, 0x56, 0x4c, 0x4c, 0x00,
      // Offset 0x267: strings[11] = '[Ljava/security/cert/X509Certificate;'
      0x25, 0x5b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3b, 0x00,
      // Offset 0x28e: strings[12] = 'checkClientTrusted'
      0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x00,
      // Offset 0x2a2: strings[13] = 'checkServerTrusted'
      0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x00,
      // Offset 0x2b6: strings[14] = 'getAcceptedIssuers'
      0x12, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x00,
      // Offset 0x2ca: strings[15] = 'this'
      0x04, 0x74, 0x68, 0x69, 0x73, 0x00,
      // Offset 0x2d0: strings[16] = 'value'
      0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00,

      // Offset 0x2d7: debug info for classes[0].direct_methods[0]
        /*           line_start */ 0x03,
        /*      parameters_size */ 0x00,
        /* DBG_SET_PROLOGUE_END */ 0x07,
        /*     <special opcode> */ 0x0e,
        /*     DBG_END_SEQUENCE */ 0x00,

      // Offset 0x2dc
        /* VISIBILITY_SYSTEM */ 0x02,
        /* encoded_annotation */
          /* type_idx */ 0x01, // 'Ldalvik/annotation/Throws;'
          /* size */ 0x01,
            /* name_idx */ 0x10, // 'value'
            /* VALUE_ARRAY */ 0x1c,
              /* size */ 0x01,
              /* VALUE_TYPE */ 0x18, 0x04, // 'Ljava/security/cert/CertificateException;'

      // Offset 0x2e4: class data for classes[0]
        /*   static_fields_size */ 0x00,
        /* instance_fields_size */ 0x00,
        /*  direct_methods_size */ 0x01,
        /* virtual_methods_size */ 0x03,

        /* static_fields: none */
        /* instance_fields: none */

        // direct_methods[0]
          /* method_idx_diff */ 0x00,
          /*    access_flags */ 0x81, 0x80, 0x04,
          /*        code_off */ 0xc8, 0x02,

        // virtual_methods[0]
          /* method_idx_diff */ 0x01,
          /*    access_flags */ 0x81, 0x02,
          /*        code_off */ 0x00,
        // virtual_methods[1]
          /* method_idx_diff */ 0x01,
          /*    access_flags */ 0x81, 0x02,
          /*        code_off */ 0x00,
        // virtual_methods[1]
          /* method_idx_diff */ 0x01,
          /*    access_flags */ 0x81, 0x02,
          /*        code_off */ 0x00,

      // Padding
      0x00, 0x00,

      // Offset 0x2fc: map
        /* size */ 0x0f, 0x00, 0x00, 0x00,
        // list[0]
          /*                TYPE_HEADER_ITEM */ 0x00, 0x00,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x01, 0x00, 0x00, 0x00,
          /*                          offset */ 0x00, 0x00, 0x00, 0x00,
        // list[1]
          /*             TYPE_STRING_ID_ITEM */ 0x01, 0x00,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x11, 0x00, 0x00, 0x00,
          /*                          offset */ 0x70, 0x00, 0x00, 0x00,
        // list[2]
          /*               TYPE_TYPE_ID_ITEM */ 0x02, 0x00,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x08, 0x00, 0x00, 0x00,
          /*                          offset */ 0xb4, 0x00, 0x00, 0x00,
        // list[3]
          /*              TYPE_PROTO_ID_ITEM */ 0x03, 0x00,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x03, 0x00, 0x00, 0x00,
          /*                          offset */ 0xd4, 0x00, 0x00, 0x00,
        // list[4]
          /*             TYPE_METHOD_ID_ITEM */ 0x05, 0x00,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x05, 0x00, 0x00, 0x00,
          /*                          offset */ 0xf8, 0x00, 0x00, 0x00,
        // list[5]
          /*             TYPE_CLASS_DEF_ITEM */ 0x06, 0x00,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x01, 0x00, 0x00, 0x00,
          /*                          offset */ 0x20, 0x01, 0x00, 0x00,
        // list[6]
          /*        TYPE_ANNOTATION_SET_ITEM */ 0x03, 0x10,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x01, 0x00, 0x00, 0x00,
          /*                          offset */ 0x40, 0x01, 0x00, 0x00,
        // list[7]
          /*                  TYPE_CODE_ITEM */ 0x01, 0x20,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x01, 0x00, 0x00, 0x00,
          /*                          offset */ 0x48, 0x01, 0x00, 0x00,
        // list[8]
          /* TYPE_ANNOTATIONS_DIRECTORY_ITEM */ 0x06, 0x20,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x01, 0x00, 0x00, 0x00,
          /*                          offset */ 0x60, 0x01, 0x00, 0x00,
        // list[9]
          /*                  TYPE_TYPE_LIST */ 0x01, 0x10,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x02, 0x00, 0x00, 0x00,
          /*                          offset */ 0x80, 0x01, 0x00, 0x00,
        // list[10]
          /*           TYPE_STRING_DATA_ITEM */ 0x02, 0x20,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x11, 0x00, 0x00, 0x00,
          /*                          offset */ 0x90, 0x01, 0x00, 0x00,
        // list[11]
          /*            TYPE_DEBUG_INFO_ITEM */ 0x03, 0x20,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x01, 0x00, 0x00, 0x00,
          /*                          offset */ 0xd7, 0x02, 0x00, 0x00,
        // list[12]
          /*            TYPE_ANNOTATION_ITEM */ 0x04, 0x20,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x01, 0x00, 0x00, 0x00,
          /*                          offset */ 0xdc, 0x02, 0x00, 0x00,
        // list[13]
          /*            TYPE_CLASS_DATA_ITEM */ 0x00, 0x20,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x01, 0x00, 0x00, 0x00,
          /*                          offset */ 0xe4, 0x02, 0x00, 0x00,
        // list[14]
          /*                   TYPE_MAP_LIST */ 0x00, 0x10,
          /*                          unused */ 0x00, 0x00,
          /*                            size */ 0x01, 0x00, 0x00, 0x00,
          /*                          offset */ 0xfc, 0x02, 0x00, 0x00
    ]);

    const actualHex = hexdump(actual, { ansi: true });
    const expectedHex = hexdump(expected, { ansi: true });
    actualHex.should.be.equal(expectedHex);
  });
});

function hexdump (buffer, options) {
  options = options || {};

  const startOffset = options.offset || 0;
  let length = options.length;
  if (length === undefined) {
    length = buffer.length;
  }
  const showHeader = options.hasOwnProperty('header') ? options.header : true;
  const useAnsi = options.hasOwnProperty('ansi') ? options.ansi : false;

  const columnPadding = '  ';
  const leftColumnWidth = 8;
  const hexLegend = ' 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F';
  const asciiLegend = '0123456789ABCDEF';

  let resetColor, offsetColor, dataColor, newlineColor;
  if (useAnsi) {
    resetColor = '\x1b[0m';
    offsetColor = '\x1b[0;32m';
    dataColor = '\x1b[0;33m';
    newlineColor = resetColor;
  } else {
    resetColor = '';
    offsetColor = '';
    dataColor = '';
    newlineColor = '';
  }

  const result = [];

  if (showHeader) {
    result.push(
      '        ',
      columnPadding,
      hexLegend,
      columnPadding,
      asciiLegend,
      '\n'
    );
  }

  let offset = startOffset;
  for (let bufferOffset = 0; bufferOffset < length; bufferOffset += 16) {
    if (bufferOffset !== 0) {
      result.push('\n');
    }

    result.push(
      offsetColor, pad(offset.toString(16), leftColumnWidth, '0'), resetColor,
      columnPadding
    );

    const asciiChars = [];
    const lineSize = Math.min(length - offset, 16);

    for (let lineOffset = 0; lineOffset !== lineSize; lineOffset++) {
      const value = buffer[offset++];

      const isNewline = value === 10;

      const hexPair = pad(value.toString(16), 2, '0');
      if (lineOffset !== 0) {
        result.push(' ');
      }
      result.push(
        isNewline ? newlineColor : dataColor,
        hexPair,
        resetColor
      );

      asciiChars.push(
        isNewline ? newlineColor : dataColor,
        (value >= 32 && value <= 126) ? String.fromCharCode(value) : '.',
        resetColor
      );
    }

    for (let lineOffset = lineSize; lineOffset !== 16; lineOffset++) {
      result.push('   ');
      asciiChars.push(' ');
    }

    result.push(columnPadding);

    Array.prototype.push.apply(result, asciiChars);
  }

  let trailingSpaceCount = 0;
  for (let tailOffset = result.length - 1; tailOffset >= 0 && result[tailOffset] === ' '; tailOffset--) {
    trailingSpaceCount++;
  }

  return result.slice(0, result.length - trailingSpaceCount).join('');
}

function pad (str, width, fill) {
  const result = [];
  const paddingSize = Math.max(width - str.length, 0);
  for (let index = 0; index !== paddingSize; index++) {
    result.push(fill);
  }
  return result.join('') + str;
}
